{"version":3,"sources":["../../src/command/RetrySendDraftedDisbursementCommand.js"],"names":["RetrySendDraftedDisbursementCommand","constructor","readBalanceService","ReadBalanceService","readDisbursementService","ReadDisbursementService","readUserService","ReadUserService","disbursementHttpService","DisbursementHttpService","retrySendDraftedDisbursement","disbursements","readManyByStatus","Disbursement","STATUS_PENDING","console","log","length","retryPromises","map","disbursement","disbursementId","ATTRIBUTE_ID","userId","ATTRIBUTE_USER_ID","user","readOneById","balance","readOneByUserId","sendOneDisbursement","run","command","Promise","all","error"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,mCAAN,CAA0C;AACxCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,kBAAL,GAA0B,IAAIC,2BAAJ,EAA1B;AACA,SAAKC,uBAAL,GAA+B,IAAIC,gCAAJ,EAA/B;AACA,SAAKC,eAAL,GAAuB,IAAIC,wBAAJ,EAAvB;AACA,SAAKC,uBAAL,GAA+B,IAAIC,gCAAJ,EAA/B;AACD;;AAEiC,QAA5BC,4BAA4B,GAAG;AACnC,UAAMC,aAAa,GAAG,MAAM,KAAKP,uBAAL,CAA6BQ,gBAA7B,CAC1BC,sBAAaC,cADa,CAA5B;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAQL,aAAa,CAACM,MAAO,wBAA1C;AAEA,UAAMC,aAAa,GAAGP,aAAa,CAACQ,GAAd,CAAkB,MAAOC,YAAP,IAAwB;AAC9D,YAAMC,cAAc,GAAGD,YAAY,CAACP,sBAAaS,YAAd,CAAnC;AACA,YAAMC,MAAM,GAAGH,YAAY,CAACP,sBAAaW,iBAAd,CAA3B;AAEA,YAAMC,IAAI,GAAG,MAAM,KAAKnB,eAAL,CAAqBoB,WAArB,CAAiCH,MAAjC,CAAnB;AACA,YAAMI,OAAO,GAAG,MAAM,KAAKzB,kBAAL,CAAwB0B,eAAxB,CAAwCL,MAAxC,CAAtB;AAEA,aAAO,KAAKf,uBAAL,CAA6BqB,mBAA7B,CACLJ,IADK,EAELE,OAFK,EAGLN,cAHK,CAAP;AAKD,KAZqB,CAAtB;AAcA,WAAOH,aAAP;AACD;;AA9BuC;;AAiC1C,eAAeY,GAAf,GAAqB;AACnB,QAAMC,OAAO,GAAG,IAAI/B,mCAAJ,EAAhB;AACA,QAAMkB,aAAa,GAAG,MAAMa,OAAO,CAACrB,4BAAR,EAA5B;;AAEA,MAAI;AACFsB,IAAAA,OAAO,CAACC,GAAR,CAAYf,aAAZ;AACD,GAFD,CAEE,OAAOgB,KAAP,EAAc;AACdnB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,KAAZ;AACD;AACF;;AAEDJ,GAAG","sourcesContent":["import Disbursement from \"../const/Disbursement\";\nimport ReadDisbursementService from \"~src/service/ReadDisbursementService\";\nimport ReadUserService from \"~src/service/ReadUserService\";\nimport ReadBalanceService from \"~src/service/ReadBalanceService\";\nimport DisbursementHttpService from \"~src/service/DisbursementHttpService\";\n\nclass RetrySendDraftedDisbursementCommand {\n  constructor() {\n    this.readBalanceService = new ReadBalanceService();\n    this.readDisbursementService = new ReadDisbursementService();\n    this.readUserService = new ReadUserService();\n    this.disbursementHttpService = new DisbursementHttpService();\n  }\n\n  async retrySendDraftedDisbursement() {\n    const disbursements = await this.readDisbursementService.readManyByStatus(\n      Disbursement.STATUS_PENDING\n    );\n\n    console.log(`Found ${disbursements.length} drafted disbursements`);\n\n    const retryPromises = disbursements.map(async (disbursement) => {\n      const disbursementId = disbursement[Disbursement.ATTRIBUTE_ID];\n      const userId = disbursement[Disbursement.ATTRIBUTE_USER_ID];\n\n      const user = await this.readUserService.readOneById(userId);\n      const balance = await this.readBalanceService.readOneByUserId(userId);\n\n      return this.disbursementHttpService.sendOneDisbursement(\n        user,\n        balance,\n        disbursementId\n      );\n    });\n\n    return retryPromises;\n  }\n}\n\nasync function run() {\n  const command = new RetrySendDraftedDisbursementCommand();\n  const retryPromises = await command.retrySendDraftedDisbursement();\n\n  try {\n    Promise.all(retryPromises);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nrun();\n"],"file":"RetrySendDraftedDisbursementCommand.js"}