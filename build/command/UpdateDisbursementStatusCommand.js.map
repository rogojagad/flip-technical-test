{"version":3,"sources":["../../src/command/UpdateDisbursementStatusCommand.js"],"names":["UpdateDisbursementStatusCommand","constructor","disbursementHttpService","DisbursementHttpService","updateDisbursementService","UpdateDisbursementService","readDisbursementService","ReadDisbursementService","readBalanceService","ReadBalanceService","updateBalanceService","UpdateBalanceService","getAndUpdateDisbursementStatus","transactionId","result","getDisbursementStatusById","status","DisbursementResponse","ATTRIBUTE_DATA","ATTRIBUTE_RESPONSE_STATUS","isSuccess","Disbursement","STATUS_SUCCESS","console","log","disbursementRecord","readOneByTransactionId","userId","ATTRIBUTE_USER_ID","balanceRecord","readOneByUserId","newDisbursementStatusField","Object","ATTRIBUTE_STATUS","updateOne","ATTRIBUTE_ID","newBalanceField","Balance","ATTRIBUTE_AMOUNT","run","process","argv","updateDisbursementStatusCommand"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,+BAAN,CAAsC;AACpCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,uBAAL,GAA+B,IAAIC,gCAAJ,EAA/B;AACA,SAAKC,yBAAL,GAAiC,IAAIC,kCAAJ,EAAjC;AACA,SAAKC,uBAAL,GAA+B,IAAIC,gCAAJ,EAA/B;AACA,SAAKC,kBAAL,GAA0B,IAAIC,2BAAJ,EAA1B;AACA,SAAKC,oBAAL,GAA4B,IAAIC,6BAAJ,EAA5B;AACD;;AAEmC,QAA9BC,8BAA8B,CAACC,aAAD,EAAgB;AAClD,UAAMC,MAAM,GAAG,MAAM,KAAKZ,uBAAL,CAA6Ba,yBAA7B,CACnBF,aADmB,CAArB;AAGA,UAAMG,MAAM,GACVF,MAAM,CAACG,8BAAqBC,cAAtB,CAAN,CACED,8BAAqBE,yBADvB,CADF;AAIA,UAAMC,SAAS,GAAGJ,MAAM,KAAKK,sBAAaC,cAA1C;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBX,aAAc,qBAAoBG,MAAO,EAAvE;;AAEA,QAAII,SAAJ,EAAe;AACb,YAAMK,kBAAkB,GAAG,MAAM,KAAKnB,uBAAL,CAA6BoB,sBAA7B,CAC/Bb,aAD+B,CAAjC;AAGA,YAAMc,MAAM,GAAGF,kBAAkB,CAACJ,sBAAaO,iBAAd,CAAjC;AACA,YAAMC,aAAa,GAAG,MAAM,KAAKrB,kBAAL,CAAwBsB,eAAxB,CAC1BH,MAD0B,CAA5B;AAIA,YAAMI,0BAA0B,GAAGC,MAAM,EAAzC;AACAD,MAAAA,0BAA0B,CAACV,sBAAaY,gBAAd,CAA1B,GAA4DjB,MAA5D;AAEA,YAAM,KAAKZ,yBAAL,CAA+B8B,SAA/B,CACJT,kBAAkB,CAACJ,sBAAac,YAAd,CADd,EAEJJ,0BAFI,CAAN;AAKA,YAAMK,eAAe,GAAGJ,MAAM,EAA9B;AACAI,MAAAA,eAAe,CAACC,iBAAQC,gBAAT,CAAf,GAA4C,CAA5C;AAEA,YAAM,KAAK5B,oBAAL,CAA0BwB,SAA1B,CACJL,aAAa,CAACQ,iBAAQF,YAAT,CADT,EAEJC,eAFI,CAAN;AAID;;AAEDb,IAAAA,OAAO,CAACC,GAAR,CACG,wDAAuDX,aAAc,EADxE;AAGD;;AAlDmC;;AAqDtC,eAAe0B,GAAf,GAAqB;AACnB,QAAM1B,aAAa,GAAG2B,OAAO,CAACC,IAAR,CAAa,CAAb,CAAtB;;AAEA,MAAI5B,aAAJ,EAAmB;AACjBU,IAAAA,OAAO,CAACC,GAAR,CACG,mDAAkDX,aAAc,EADnE;AAGA,UAAM6B,+BAA+B,GAAG,IAAI1C,+BAAJ,EAAxC;AACA0C,IAAAA,+BAA+B,CAAC9B,8BAAhC,CACEC,aADF;AAGD,GARD,MAQO;AACLU,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD;AACF;;AAEDe,GAAG","sourcesContent":["import Balance from \"../const/Balance\";\nimport Disbursement from \"../const/Disbursement\";\nimport DisbursementHttpService from \"~src/service/DisbursementHttpService\";\nimport DisbursementResponse from \"~src/const/DisbursementResponse\";\nimport ReadBalanceService from \"~src/service/ReadBalanceService\";\nimport ReadDisbursementService from \"~src/service/ReadDisbursementService\";\nimport UpdateBalanceService from \"~src/service/UpdateBalanceService\";\nimport UpdateDisbursementService from \"~src/service/UpdateDisbursementService\";\n\nclass UpdateDisbursementStatusCommand {\n  constructor() {\n    this.disbursementHttpService = new DisbursementHttpService();\n    this.updateDisbursementService = new UpdateDisbursementService();\n    this.readDisbursementService = new ReadDisbursementService();\n    this.readBalanceService = new ReadBalanceService();\n    this.updateBalanceService = new UpdateBalanceService();\n  }\n\n  async getAndUpdateDisbursementStatus(transactionId) {\n    const result = await this.disbursementHttpService.getDisbursementStatusById(\n      transactionId\n    );\n    const status =\n      result[DisbursementResponse.ATTRIBUTE_DATA][\n        DisbursementResponse.ATTRIBUTE_RESPONSE_STATUS\n      ];\n    const isSuccess = status === Disbursement.STATUS_SUCCESS;\n\n    console.log(`Transaction ID ${transactionId} newest status is ${status}`);\n\n    if (isSuccess) {\n      const disbursementRecord = await this.readDisbursementService.readOneByTransactionId(\n        transactionId\n      );\n      const userId = disbursementRecord[Disbursement.ATTRIBUTE_USER_ID];\n      const balanceRecord = await this.readBalanceService.readOneByUserId(\n        userId\n      );\n\n      const newDisbursementStatusField = Object();\n      newDisbursementStatusField[Disbursement.ATTRIBUTE_STATUS] = status;\n\n      await this.updateDisbursementService.updateOne(\n        disbursementRecord[Disbursement.ATTRIBUTE_ID],\n        newDisbursementStatusField\n      );\n\n      const newBalanceField = Object();\n      newBalanceField[Balance.ATTRIBUTE_AMOUNT] = 0;\n\n      await this.updateBalanceService.updateOne(\n        balanceRecord[Balance.ATTRIBUTE_ID],\n        newBalanceField\n      );\n    }\n\n    console.log(\n      `Done updating disbursement status for Transaction ID ${transactionId}`\n    );\n  }\n}\n\nasync function run() {\n  const transactionId = process.argv[2];\n\n  if (transactionId) {\n    console.log(\n      `Updating disbursement status for Transaction ID ${transactionId}`\n    );\n    const updateDisbursementStatusCommand = new UpdateDisbursementStatusCommand();\n    updateDisbursementStatusCommand.getAndUpdateDisbursementStatus(\n      transactionId\n    );\n  } else {\n    console.log(\"Please provide Transaction ID\");\n  }\n}\n\nrun();\n"],"file":"UpdateDisbursementStatusCommand.js"}