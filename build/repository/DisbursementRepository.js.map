{"version":3,"sources":["../../src/repository/DisbursementRepository.js"],"names":["DisbursementRepository","constructor","db","createOne","fields","docRef","collection","Disbursement","COLLECTION","add","get","id","data","updateOne","doc","update","readOneByTransactionId","transactionId","where","ATTRIBUTE_TRANSACTION_ID","docs","readManyByUserId","userId","disbursementsRef","ATTRIBUTE_USER_ID","disbursements","Array","forEach","disbursementRef","push","readManyByStatus","status","ATTRIBUTE_STATUS"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,MAAMA,sBAAN,CAA6B;AAC1CC,EAAAA,WAAW,GAAG;AACZ,SAAKC,EAAL,GAAUA,iBAAV;AACD;;AAEc,QAATC,SAAS,CAACC,MAAD,EAAS;AACtB,UAAMC,MAAM,GAAG,MAAM,CACnB,MAAM,KAAKH,EAAL,CAAQI,UAAR,CAAmBC,sBAAaC,UAAhC,EAA4CC,GAA5C,CAAgDL,MAAhD,CADa,EAEnBM,GAFmB,EAArB;AAIA,UAAMC,EAAE,GAAGN,MAAM,CAACM,EAAlB;AACA,UAAMC,IAAI,GAAGP,MAAM,CAACO,IAAP,EAAb;AAEA,WAAO;AAAED,MAAAA,EAAF;AAAM,SAAGC;AAAT,KAAP;AACD;;AAEc,QAATC,SAAS,CAACF,EAAD,EAAKP,MAAL,EAAa;AAC1B,WAAO,MAAM,KAAKF,EAAL,CACVI,UADU,CACCC,sBAAaC,UADd,EAEVM,GAFU,CAENH,EAFM,EAGVI,MAHU,CAGHX,MAHG,CAAb;AAID;;AAE2B,QAAtBY,sBAAsB,CAACC,aAAD,EAAgB;AAC1C,UAAMZ,MAAM,GAAG,CACb,MAAM,KAAKH,EAAL,CACHI,UADG,CACQC,sBAAaC,UADrB,EAEHU,KAFG,CAEGX,sBAAaY,wBAFhB,EAE0C,IAF1C,EAEgDF,aAFhD,EAGHP,GAHG,EADO,EAKbU,IALa,CAKR,CALQ,CAAf;AAOA,UAAMT,EAAE,GAAGN,MAAM,CAACM,EAAlB;AACA,UAAMC,IAAI,GAAGP,MAAM,CAACO,IAAP,EAAb;;AAEA,QAAIA,IAAJ,EAAU;AACR,aAAO;AAAED,QAAAA,EAAF;AAAM,WAAGC;AAAT,OAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEqB,QAAhBS,gBAAgB,CAACC,MAAD,EAAS;AAC7B,UAAMC,gBAAgB,GAAG,CACvB,MAAM,KAAKrB,EAAL,CACHI,UADG,CACQC,sBAAaC,UADrB,EAEHU,KAFG,CAEGX,sBAAaiB,iBAFhB,EAEmC,IAFnC,EAEyCF,MAFzC,EAGHZ,GAHG,EADiB,EAKvBU,IALF;AAOA,UAAMK,aAAa,GAAG,IAAIC,KAAJ,EAAtB;AAEAH,IAAAA,gBAAgB,CAACI,OAAjB,CAA0BC,eAAD,IAAqB;AAC5C,YAAMjB,EAAE,GAAGiB,eAAe,CAACjB,EAA3B;AACA,YAAMC,IAAI,GAAGgB,eAAe,CAAChB,IAAhB,EAAb;AAEAa,MAAAA,aAAa,CAACI,IAAd,CAAmB;AAAElB,QAAAA,EAAF;AAAM,WAAGC;AAAT,OAAnB;AACD,KALD;AAOA,WAAOa,aAAP;AACD;;AAEqB,QAAhBK,gBAAgB,CAACC,MAAD,EAAS;AAC7B,UAAMR,gBAAgB,GAAG,CACvB,MAAM,KAAKrB,EAAL,CACHI,UADG,CACQC,sBAAaC,UADrB,EAEHU,KAFG,CAEGX,sBAAayB,gBAFhB,EAEkC,IAFlC,EAEwCD,MAFxC,EAGHrB,GAHG,EADiB,EAKvBU,IALF;AAOA,UAAMK,aAAa,GAAG,IAAIC,KAAJ,EAAtB;AAEAH,IAAAA,gBAAgB,CAACI,OAAjB,CAA0BC,eAAD,IAAqB;AAC5C,YAAMjB,EAAE,GAAGiB,eAAe,CAACjB,EAA3B;AACA,YAAMC,IAAI,GAAGgB,eAAe,CAAChB,IAAhB,EAAb;AAEAa,MAAAA,aAAa,CAACI,IAAd,CAAmB;AAAElB,QAAAA,EAAF;AAAM,WAAGC;AAAT,OAAnB;AACD,KALD;AAOA,WAAOa,aAAP;AACD;;AA/EyC","sourcesContent":["import Disbursement from \"~src/const/Disbursement\";\nimport db from \"~src/entity/Firebase\";\n\nexport default class DisbursementRepository {\n  constructor() {\n    this.db = db;\n  }\n\n  async createOne(fields) {\n    const docRef = await (\n      await this.db.collection(Disbursement.COLLECTION).add(fields)\n    ).get();\n\n    const id = docRef.id;\n    const data = docRef.data();\n\n    return { id, ...data };\n  }\n\n  async updateOne(id, fields) {\n    return await this.db\n      .collection(Disbursement.COLLECTION)\n      .doc(id)\n      .update(fields);\n  }\n\n  async readOneByTransactionId(transactionId) {\n    const docRef = (\n      await this.db\n        .collection(Disbursement.COLLECTION)\n        .where(Disbursement.ATTRIBUTE_TRANSACTION_ID, \"==\", transactionId)\n        .get()\n    ).docs[0];\n\n    const id = docRef.id;\n    const data = docRef.data();\n\n    if (data) {\n      return { id, ...data };\n    }\n\n    return null;\n  }\n\n  async readManyByUserId(userId) {\n    const disbursementsRef = (\n      await this.db\n        .collection(Disbursement.COLLECTION)\n        .where(Disbursement.ATTRIBUTE_USER_ID, \"==\", userId)\n        .get()\n    ).docs;\n\n    const disbursements = new Array();\n\n    disbursementsRef.forEach((disbursementRef) => {\n      const id = disbursementRef.id;\n      const data = disbursementRef.data();\n\n      disbursements.push({ id, ...data });\n    });\n\n    return disbursements;\n  }\n\n  async readManyByStatus(status) {\n    const disbursementsRef = (\n      await this.db\n        .collection(Disbursement.COLLECTION)\n        .where(Disbursement.ATTRIBUTE_STATUS, \"==\", status)\n        .get()\n    ).docs;\n\n    const disbursements = new Array();\n\n    disbursementsRef.forEach((disbursementRef) => {\n      const id = disbursementRef.id;\n      const data = disbursementRef.data();\n\n      disbursements.push({ id, ...data });\n    });\n\n    return disbursements;\n  }\n}\n"],"file":"DisbursementRepository.js"}