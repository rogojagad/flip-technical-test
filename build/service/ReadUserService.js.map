{"version":3,"sources":["../../src/service/ReadUserService.js"],"names":["ReadUserService","constructor","userRepository","UserRepository","readOneById","idParam","readAll","users","results","Array","forEach","user","id","push","data"],"mappings":";;;;;;;AAAA;;;;AAEe,MAAMA,eAAN,CAAsB;AACnCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,cAAL,GAAsB,IAAIC,uBAAJ,EAAtB;AACD;;AAEgB,QAAXC,WAAW,CAACC,OAAD,EAAU;AACzB,WAAO,MAAM,KAAKH,cAAL,CAAoBE,WAApB,CAAgCC,OAAhC,CAAb;AACD;;AAEY,QAAPC,OAAO,GAAG;AACd,UAAMC,KAAK,GAAG,MAAM,KAAKL,cAAL,CAAoBI,OAApB,EAApB;AACA,UAAME,OAAO,GAAG,IAAIC,KAAJ,EAAhB;AAEAF,IAAAA,KAAK,CAACG,OAAN,CAAeC,IAAD,IAAU;AACtB,YAAMC,EAAE,GAAGD,IAAI,CAACC,EAAhB;AACAJ,MAAAA,OAAO,CAACK,IAAR,CAAa;AAAED,QAAAA,EAAF;AAAM,WAAGD,IAAI,CAACG,IAAL;AAAT,OAAb;AACD,KAHD;AAKA,WAAON,OAAP;AACD;;AAnBkC","sourcesContent":["import UserRepository from \"~src/repository/UserRepository\";\n\nexport default class ReadUserService {\n  constructor() {\n    this.userRepository = new UserRepository();\n  }\n\n  async readOneById(idParam) {\n    return await this.userRepository.readOneById(idParam);\n  }\n\n  async readAll() {\n    const users = await this.userRepository.readAll();\n    const results = new Array();\n\n    users.forEach((user) => {\n      const id = user.id;\n      results.push({ id, ...user.data() });\n    });\n\n    return results;\n  }\n}\n"],"file":"ReadUserService.js"}