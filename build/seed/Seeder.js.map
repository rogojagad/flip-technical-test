{"version":3,"sources":["../../src/seed/Seeder.js"],"names":["userRepository","UserRepository","balanceRepository","BalanceRepository","allCollections","User","COLLECTION","Balance","Disbursement","seed","truncateCollection","batchSize","forEach","collection","collectionRef","db","query","orderBy","limit","Promise","resolve","reject","catch","console","log","userIds","seedUsers","seedBalance","Array","fields","Object","ATTRIBUTE_NAME","ATTRIBUTE_BANK_CODE","ATTRIBUTE_ACCOUNT_NUMBER","user","createOne","push","id","userId","ATTRIBUTE_AMOUNT","ATTRIBUTE_USER_ID"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,cAAc,GAAG,IAAIC,uBAAJ,EAAvB;AACA,MAAMC,iBAAiB,GAAG,IAAIC,0BAAJ,EAA1B;AACA,MAAMC,cAAc,GAAG,CACrBC,cAAKC,UADgB,EAErBC,iBAAQD,UAFa,EAGrBE,sBAAaF,UAHQ,CAAvB;AAMAG,IAAI;;AAEJ,eAAeC,kBAAf,GAAoC;AAClC,QAAMC,SAAS,GAAG,CAAlB;AAEAP,EAAAA,cAAc,CAACQ,OAAf,CAAwBC,UAAD,IAAgB;AACrC,UAAMC,aAAa,GAAGC,kBAAGF,UAAH,CAAcA,UAAd,CAAtB;;AACA,UAAMG,KAAK,GAAGF,aAAa,CAACG,OAAd,CAAsB,UAAtB,EAAkCC,KAAlC,CAAwCP,SAAxC,CAAd;AAEA,WAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,uCAAiBN,iBAAjB,EAAqBC,KAArB,EAA4BI,OAA5B,EAAqCE,KAArC,CAA2CD,MAA3C;AACD,KAFM,CAAP;AAGD,GAPD;AAQD;;AAED,eAAeZ,IAAf,GAAsB;AACpBc,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,QAAMd,kBAAkB,EAAxB;AACA,QAAMe,OAAO,GAAG,MAAMC,SAAS,EAA/B;AACA,QAAMC,WAAW,CAACF,OAAD,CAAjB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;;AAED,eAAeE,SAAf,GAA2B;AACzB,QAAMD,OAAO,GAAG,IAAIG,KAAJ,EAAhB;AAEA,QAAMC,MAAM,GAAGC,MAAM,EAArB;AACAD,EAAAA,MAAM,CAACxB,cAAK0B,cAAN,CAAN,GAA+B,QAAO,CAAE,EAAxC;AACAF,EAAAA,MAAM,CAACxB,cAAK2B,mBAAN,CAAN,GAAoC,KAApC;AACAH,EAAAA,MAAM,CAACxB,cAAK4B,wBAAN,CAAN,GAAyC,QAAO,CAAE,EAAlD;AAEA,QAAMC,IAAI,GAAG,MAAMlC,cAAc,CAACmC,SAAf,CAAyBN,MAAzB,CAAnB;AACAJ,EAAAA,OAAO,CAACW,IAAR,CAAaF,IAAI,CAACG,EAAlB;AAEA,SAAOZ,OAAP;AACD;;AAED,eAAeE,WAAf,CAA2BF,OAA3B,EAAoC;AAClCA,EAAAA,OAAO,CAACb,OAAR,CAAiB0B,MAAD,IAAY;AAC1B,UAAMT,MAAM,GAAGC,MAAM,EAArB;AACAD,IAAAA,MAAM,CAACtB,iBAAQgC,gBAAT,CAAN,GAAmC,OAAnC;AACAV,IAAAA,MAAM,CAACtB,iBAAQiC,iBAAT,CAAN,GAAoCF,MAApC;AAEApC,IAAAA,iBAAiB,CAACiC,SAAlB,CAA4BN,MAA5B;AACD,GAND;AAOD","sourcesContent":["import { deleteQueryBatch } from \"~src/seed/Truncator\";\nimport User from \"~src/const/User\";\nimport Balance from \"~src/const/Balance\";\nimport BalanceRepository from \"~src/repository/BalanceRepository\";\nimport db from \"~src/entity/Firebase\";\nimport Disbursement from \"~src/const/Disbursement\";\nimport UserRepository from \"~src/repository/UserRepository\";\n\nconst userRepository = new UserRepository();\nconst balanceRepository = new BalanceRepository();\nconst allCollections = [\n  User.COLLECTION,\n  Balance.COLLECTION,\n  Disbursement.COLLECTION,\n];\n\nseed();\n\nasync function truncateCollection() {\n  const batchSize = 5;\n\n  allCollections.forEach((collection) => {\n    const collectionRef = db.collection(collection);\n    const query = collectionRef.orderBy(\"__name__\").limit(batchSize);\n\n    return new Promise((resolve, reject) => {\n      deleteQueryBatch(db, query, resolve).catch(reject);\n    });\n  });\n}\n\nasync function seed() {\n  console.log(\"Truncating Database\");\n  await truncateCollection();\n  const userIds = await seedUsers();\n  await seedBalance(userIds);\n  console.log(\"Done Seeding Database\");\n}\n\nasync function seedUsers() {\n  const userIds = new Array();\n\n  const fields = Object();\n  fields[User.ATTRIBUTE_NAME] = `User ${0}`;\n  fields[User.ATTRIBUTE_BANK_CODE] = `BCA`;\n  fields[User.ATTRIBUTE_ACCOUNT_NUMBER] = `12300${0}`;\n\n  const user = await userRepository.createOne(fields);\n  userIds.push(user.id);\n\n  return userIds;\n}\n\nasync function seedBalance(userIds) {\n  userIds.forEach((userId) => {\n    const fields = Object();\n    fields[Balance.ATTRIBUTE_AMOUNT] = 1000000;\n    fields[Balance.ATTRIBUTE_USER_ID] = userId;\n\n    balanceRepository.createOne(fields);\n  });\n}\n"],"file":"Seeder.js"}